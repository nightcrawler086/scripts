
 
   param(
 
       [CmdletBinding()]
 
       [Parameter(Position=0,Mandatory=$true,ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
       [string[]]$FolderPath,
 
       [ValidateRange(10,248)][int16]$MaxDepth=248
   )
 
  
 
    begin {
        if (!(Test-Path -Path $(Join-Path $env:SystemRoot 'System32\robocopy.exe'))) {
            write-warning "Robocopy not found, please install robocopy"
            return
        }
 
        $Results = @()
    }
  
 
    process {
 
        foreach ($Path in $FolderPath) {
 
            $RoboOutput = robocopy.exe $Path c:\doesnotexist /l /e /b /np /fp /njh /njs 
 
            # Build Array for files. 26 is added to $MaxDepth the text string generated by Robocopy
 
            $RoboOutput | Select-String "New File" | Where-Object {$_.Line.Length -ge $MaxDepth+26} | ForEach-Object {
 
                $Props = @{
                    FullPath= $_.Line.Substring(26,$_.Line.Length-26)
                    Type = 'File'
                    PathLength = $_.Line.Length-26
                }
 
                $Results += New-Object -TypeName PSCustomObject -Property $Props
            } 
 
            # Append folders to array
            # Build Array for files
 
            $RoboOutput | Select-String "New Dir" | Where-Object {$_.Line.Length -ge ($MaxDepth+22)} | ForEach-Object {
                 
                $Props = @{
                    FullPath = $_.Line.Substring(22,$_.Line.Length-22)
                    Type = 'Folder'
                    PathLength = $_.Line.Length-22
                }
 
                $Results += New-Object -TypeName PSCustomObject -Property $Props
            }
        }
    }
 
  
 
    end {
        $Results
    }


